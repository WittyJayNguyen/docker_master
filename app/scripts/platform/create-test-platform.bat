@echo off
REM Test Auto-Discovery with proper platform structure

echo.
echo =========================================
echo    Testing Auto-Discovery Structure
echo =========================================
echo.

echo üß™ Creating test-shop platform with proper structure...

set PLATFORM_NAME=test-shop
set PLATFORM_TYPE=laravel74
set PLATFORM_PORT=8017
set PHP_VERSION=74
set /a XDEBUG_PORT=%PLATFORM_PORT%+1000

REM Create platform directories in proper structure
echo ‚ÑπÔ∏è  Creating platform directory structure...
mkdir "platforms\%PLATFORM_NAME%" 2>nul
mkdir "projects\%PLATFORM_NAME%" 2>nul
mkdir "logs\apache\%PLATFORM_NAME%" 2>nul
mkdir "data\uploads\%PLATFORM_NAME%" 2>nul
echo ‚úÖ Platform directory created: platforms\%PLATFORM_NAME%
echo ‚úÖ Project directory created: projects\%PLATFORM_NAME%

REM Create platform-specific docker-compose file
echo ‚ÑπÔ∏è  Creating platform docker-compose configuration...
(
echo version: '3.8'
echo.
echo services:
echo   %PLATFORM_NAME%:
echo     build:
echo       context: ../../docker/php%PHP_VERSION%
echo       dockerfile: Dockerfile
echo     container_name: %PLATFORM_NAME%_php%PHP_VERSION%
echo     restart: unless-stopped
echo     ports:
echo       - "%PLATFORM_PORT%:80"
echo       - "%XDEBUG_PORT%:9003"  # Xdebug port
echo     volumes:
echo       - ../../projects/%PLATFORM_NAME%:/var/www/html
echo       - ../../logs/apache/%PLATFORM_NAME%:/var/log/apache2
echo       - ../../data/uploads/%PLATFORM_NAME%:/app/uploads
echo     environment:
echo       - WEB_DOCUMENT_ROOT=/var/www/html
echo       - PHP_VERSION=%PHP_VERSION%
echo       - PHP_MEMORY_LIMIT=96M
echo       - PHP_OPCACHE_MEMORY_CONSUMPTION=32
echo       - DB_HOST=postgres_low_ram
echo       - DB_PORT=5432
echo       - DB_DATABASE=%PLATFORM_NAME%_db
echo       - DB_USERNAME=postgres_user
echo       - DB_PASSWORD=postgres_pass
echo       - REDIS_HOST=redis_low_ram
echo       - REDIS_PORT=6379
echo     deploy:
echo       resources:
echo         limits:
echo           memory: 128M
echo         reservations:
echo           memory: 96M
echo     networks:
echo       - docker_master_low_ram
echo     depends_on:
echo       - postgres
echo       - redis
echo     healthcheck:
echo       test: ["CMD", "curl", "-f", "http://localhost/"]
echo       interval: 30s
echo       timeout: 10s
echo       retries: 3
echo.
echo networks:
echo   docker_master_low_ram:
echo     external: true
) > "platforms\%PLATFORM_NAME%\docker-compose.%PLATFORM_NAME%.yml"

echo ‚úÖ Platform docker-compose created: platforms\%PLATFORM_NAME%\docker-compose.%PLATFORM_NAME%.yml

REM Create platform README.md
echo ‚ÑπÔ∏è  Creating platform README...
(
echo # %PLATFORM_NAME% Platform
echo.
echo Auto-generated %PLATFORM_TYPE% platform by Docker Master.
echo.
echo ## Platform Information
echo.
echo - **Platform Name**: %PLATFORM_NAME%
echo - **Platform Type**: %PLATFORM_TYPE%
echo - **PHP Version**: %PHP_VERSION%
echo - **Port**: %PLATFORM_PORT%
echo - **Xdebug Port**: %XDEBUG_PORT%
echo - **Database**: %PLATFORM_NAME%_db
echo.
echo ## Quick Start
echo.
echo ### Option 1: Standalone Platform
echo ```bash
echo # Start this platform only
echo cd platforms/%PLATFORM_NAME%
echo docker-compose -f docker-compose.%PLATFORM_NAME%.yml up -d
echo ```
echo.
echo ### Option 2: Integrated with Main Stack
echo ```bash
echo # Add to main docker-compose and start
echo docker-compose -f docker-compose.low-ram.yml up -d %PLATFORM_NAME%
echo ```
echo.
echo ## URLs
echo.
echo - **Application**: http://localhost:%PLATFORM_PORT%
echo - **Xdebug**: localhost:%XDEBUG_PORT%
echo.
echo ## Development Commands
echo.
echo ```bash
echo # View logs
echo docker logs %PLATFORM_NAME%_php%PHP_VERSION%
echo.
echo # Shell access
echo docker exec -it %PLATFORM_NAME%_php%PHP_VERSION% bash
echo.
echo # Stop platform
echo docker-compose -f docker-compose.%PLATFORM_NAME%.yml down
echo ```
echo.
echo ---
echo *Generated by Docker Master Auto-Discovery*
) > "platforms\%PLATFORM_NAME%\README.md"

echo ‚úÖ Platform README created: platforms\%PLATFORM_NAME%\README.md

REM Create Laravel index.php
echo ‚ÑπÔ∏è  Creating Laravel application...
(
echo ^<?php
echo /**
echo  * %PLATFORM_NAME% - Laravel PHP 7.4 + PostgreSQL + Redis
echo  * Auto-generated by Docker Master Platform
echo  */
echo.
echo echo "^<h1^>üõí %PLATFORM_NAME% - Laravel PHP 7.4^</h1^>";
echo echo "^<div style='font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px;'^>";
echo.
echo echo "^<h2^>üìã Platform Information^</h2^>";
echo echo "^<p^>^<strong^>Platform:^</strong^> %PLATFORM_NAME%^</p^>";
echo echo "^<p^>^<strong^>Type:^</strong^> Laravel PHP 7.4^</p^>";
echo echo "^<p^>^<strong^>PHP Version:^</strong^> " . phpversion^(^) . "^</p^>";
echo echo "^<p^>^<strong^>Port:^</strong^> %PLATFORM_PORT%^</p^>";
echo.
echo // Database test
echo echo "^<h2^>üóÑÔ∏è PostgreSQL Connection^</h2^>";
echo $host = $_ENV['DB_HOST'] ?? 'postgres_low_ram';
echo $dbname = $_ENV['DB_DATABASE'] ?? '%PLATFORM_NAME%_db';
echo $username = $_ENV['DB_USERNAME'] ?? 'postgres_user';
echo $password = $_ENV['DB_PASSWORD'] ?? 'postgres_pass';
echo.
echo try {
echo     $pdo = new PDO^("pgsql:host=$host;port=5432;dbname=$dbname", $username, $password^);
echo     echo "^<p^>‚úÖ PostgreSQL connection successful!^</p^>";
echo } catch ^(Exception $e^) {
echo     echo "^<p^>‚ùå Database failed: " . $e-^>getMessage^(^) . "^</p^>";
echo }
echo.
echo // Redis test
echo echo "^<h2^>üî¥ Redis Connection^</h2^>";
echo $redis_host = $_ENV['REDIS_HOST'] ?? 'redis_low_ram';
echo try {
echo     $redis = new Redis^(^);
echo     $redis-^>connect^($redis_host, 6379^);
echo     echo "^<p^>‚úÖ Redis connection successful!^</p^>";
echo } catch ^(Exception $e^) {
echo     echo "^<p^>‚ùå Redis failed: " . $e-^>getMessage^(^) . "^</p^>";
echo }
echo.
echo echo "^<p^>^<em^>üê≥ %PLATFORM_NAME% ready for Laravel development!^</em^>^</p^>";
echo echo "^</div^>";
echo ?^>
) > "projects\%PLATFORM_NAME%\index.php"

echo ‚úÖ Laravel application created: projects\%PLATFORM_NAME%\index.php

REM Create database
echo ‚ÑπÔ∏è  Creating database...
docker exec postgres_low_ram psql -U postgres_user -d postgres -c "CREATE DATABASE %PLATFORM_NAME%_db;" 2>nul
if errorlevel 1 (
    echo ‚ö†Ô∏è  Database may already exist
) else (
    echo ‚úÖ Database %PLATFORM_NAME%_db created
)

echo.
echo üéâ Test Platform Created with Proper Structure!
echo ================================================================
echo.
echo üìÅ Platform Structure:
echo   platforms\%PLATFORM_NAME%\
echo   ‚îú‚îÄ‚îÄ docker-compose.%PLATFORM_NAME%.yml
echo   ‚îú‚îÄ‚îÄ README.md
echo   projects\%PLATFORM_NAME%\
echo   ‚îú‚îÄ‚îÄ index.php
echo   logs\apache\%PLATFORM_NAME%\
echo   data\uploads\%PLATFORM_NAME%\
echo.
echo üöÄ Quick Start Options:
echo.
echo Option 1 - Standalone:
echo   cd platforms\%PLATFORM_NAME%
echo   docker-compose -f docker-compose.%PLATFORM_NAME%.yml up -d
echo.
echo Option 2 - Integrated:
echo   Add service to docker-compose.low-ram.yml
echo   docker-compose -f docker-compose.low-ram.yml up -d %PLATFORM_NAME%
echo.
echo üåê URLs:
echo   ‚Ä¢ Application: http://localhost:%PLATFORM_PORT%
echo   ‚Ä¢ Xdebug: localhost:%XDEBUG_PORT%
echo.

pause
