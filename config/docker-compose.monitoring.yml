version: '3.8'

# Docker Compose file for monitoring services
# Ch·∫°y c√πng v·ªõi main docker-compose ƒë·ªÉ auto-monitor

services:
  # RAM Monitor Container - ch·∫°y script monitor b√™n trong container
  ram-monitor:
    image: alpine:latest
    container_name: docker_master_ram_monitor
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro  # Access Docker daemon
      - ./logs:/app/logs                               # Log directory
      - ./scripts:/app/scripts:ro                     # Scripts directory
    environment:
      - MONITOR_INTERVAL=30                            # Check every 30 seconds
      - HIGH_RAM_THRESHOLD=90                          # Alert when RAM > 90%
      - LOG_LEVEL=INFO
    command: >
      sh -c "
        apk add --no-cache docker-cli curl &&
        echo 'üöÄ Docker Master RAM Monitor Started' &&
        while true; do
          if docker version >/dev/null 2>&1; then
            timestamp=\$$(date '+%Y-%m-%d %H:%M:%S')
            echo \"[\$$timestamp] Monitoring Docker containers...\"
            
            # Log container stats
            docker stats --no-stream --format 'table {{.Container}}\t{{.MemUsage}}\t{{.MemPerc}}\t{{.CPUPerc}}' > /app/logs/current_stats.log
            
            # Check for high RAM usage
            docker stats --no-stream --format '{{.MemPerc}}' | while read mem_percent; do
              mem_num=\$$(echo \"\$$mem_percent\" | sed 's/%//')
              if [ \"\$$mem_num\" -gt \"\$$HIGH_RAM_THRESHOLD\" ] 2>/dev/null; then
                echo \"‚ö†Ô∏è HIGH RAM USAGE: \$$mem_percent at \$$timestamp\" | tee -a /app/logs/alerts.log
              fi
            done
            
            # Log system info every 5 minutes
            if [ \$$((\$$(date +%s) % 300)) -eq 0 ]; then
              echo \"[\$$timestamp] System Status:\" >> /app/logs/system.log
              docker system df >> /app/logs/system.log
              echo \"\" >> /app/logs/system.log
            fi
          else
            echo \"‚è≥ Waiting for Docker...\"
          fi
          
          sleep \$$MONITOR_INTERVAL
        done
      "
    networks:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 64M
        reservations:
          memory: 32M

  # Web Dashboard cho monitoring (optional)
  monitor-dashboard:
    image: nginx:alpine
    container_name: docker_master_monitor_dashboard
    restart: unless-stopped
    ports:
      - "8090:80"
    volumes:
      - ../logs:/usr/share/nginx/html/logs:ro
      - ../tools/monitoring/dashboard.html:/usr/share/nginx/html/index.html:ro
    environment:
      - NGINX_HOST=localhost
      - NGINX_PORT=80
    networks:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 32M
        reservations:
          memory: 16M
    depends_on:
      - ram-monitor

networks:
  monitoring:
    driver: bridge
    name: docker_master_monitoring
