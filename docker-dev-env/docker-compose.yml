version: '3.8'

services:
  # Nginx Web Server
  nginx:
    image: nginx:alpine
    container_name: dev_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/sites:/etc/nginx/sites-available
      - ./www:/var/www/html
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - php74
      - php82
      - php84
    networks:
      - dev-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  # PHP 7.4
  php74:
    build:
      context: ./php/7.4
      dockerfile: Dockerfile
    container_name: dev_php74
    volumes:
      - ./www:/var/www/html
      - ./logs/php74:/var/log/php
    environment:
      - PHP_VERSION=7.4
      - XDEBUG_MODE=debug
      - XDEBUG_CONFIG=client_host=host.docker.internal client_port=9003
    networks:
      - dev-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # PHP 8.2
  php82:
    build:
      context: ./php/8.2
      dockerfile: Dockerfile
    container_name: dev_php82
    volumes:
      - ./www:/var/www/html
      - ./logs/php82:/var/log/php
    environment:
      - PHP_VERSION=8.2
      - XDEBUG_MODE=debug
      - XDEBUG_CONFIG=client_host=host.docker.internal client_port=9003
    networks:
      - dev-network
    restart: unless-stopped

  # PHP 8.4 (Latest)
  php84:
    build:
      context: ./php/8.4
      dockerfile: Dockerfile
    container_name: dev_php84
    volumes:
      - ./www:/var/www/html
      - ./logs/php84:/var/log/php
    environment:
      - PHP_VERSION=8.4
      - XDEBUG_MODE=debug
      - XDEBUG_CONFIG=client_host=host.docker.internal client_port=9003
    networks:
      - dev-network
    restart: unless-stopped

  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: dev_mysql
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root123}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-dev_db}
      MYSQL_USER: ${MYSQL_USER:-dev_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-dev_pass}
    volumes:
      - ./database/mysql/data:/var/lib/mysql
      - ./database/mysql/init:/docker-entrypoint-initdb.d
      - ./database/mysql/conf/my.cnf:/etc/mysql/conf.d/custom.cnf
      - ./logs/mysql:/var/log/mysql
    networks:
      - dev-network
    restart: unless-stopped
    command: --default-authentication-plugin=mysql_native_password --ssl=0
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # PostgreSQL Database
  postgresql:
    image: postgres:15-alpine
    container_name: dev_postgresql
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-dev_db}
      POSTGRES_USER: ${POSTGRES_USER:-dev_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-dev_pass}

    volumes:
      - ./database/postgresql/data:/var/lib/postgresql/data
      - ./database/postgresql/init:/docker-entrypoint-initdb.d
      - ./logs/postgresql:/var/log/postgresql
    networks:
      - dev-network
    restart: unless-stopped

  # Adminer (Database Management UI)
  adminer:
    image: adminer:latest
    container_name: dev_adminer
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: mysql
    depends_on:
      - mysql
      - postgresql
    networks:
      - dev-network
    restart: unless-stopped

  # phpMyAdmin (MySQL Management UI)
  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    container_name: dev_phpmyadmin
    ports:
      - "8081:80"
    environment:
      PMA_HOST: mysql
      PMA_PORT: 3306
      PMA_USER: ${MYSQL_USER:-dev_user}
      PMA_PASSWORD: ${MYSQL_PASSWORD:-dev_pass}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root123}
    depends_on:
      - mysql
    networks:
      - dev-network
    restart: unless-stopped

  # Redis (Optional - for caching)
  redis:
    image: redis:7-alpine
    container_name: dev_redis
    ports:
      - "6379:6379"
    volumes:
      - ./database/redis/data:/data
      - ./logs/redis:/var/log/redis
    networks:
      - dev-network
    restart: unless-stopped
    command: redis-server --appendonly yes

networks:
  dev-network:
    driver: bridge

volumes:
  mysql_data:
  postgresql_data:
  redis_data:
