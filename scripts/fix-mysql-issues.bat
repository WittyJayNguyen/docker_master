@echo off
REM Docker Master Platform - Fix MySQL/Database Issues
REM Kh·∫Øc ph·ª•c c√°c v·∫•n ƒë·ªÅ v·ªÅ MySQL v√† database

echo.
echo ========================================
echo   Fix MySQL/Database Issues
echo ========================================
echo.

echo üîç KI·ªÇM TRA V·∫§N ƒê·ªÄ DATABASE
echo ================================================================

echo üìä Ki·ªÉm tra containers ƒëang ch·∫°y:
docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

echo.
echo üóÑÔ∏è Ki·ªÉm tra PostgreSQL (Database ch√≠nh):
echo ----------------------------------------------------------------
docker exec postgres_low_ram pg_isready -U postgres_user
if errorlevel 1 (
    echo ‚ùå PostgreSQL kh√¥ng ho·∫°t ƒë·ªông
    echo üîß ƒêang restart PostgreSQL...
    docker restart postgres_low_ram
    timeout /t 10 /nobreak >nul
    docker exec postgres_low_ram pg_isready -U postgres_user
) else (
    echo ‚úÖ PostgreSQL ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng
)

echo.
echo üîç Ki·ªÉm tra MySQL containers:
echo ----------------------------------------------------------------
docker ps -a | findstr mysql
if errorlevel 1 (
    echo ‚ÑπÔ∏è  Kh√¥ng c√≥ MySQL container n√†o
    echo ‚ÑπÔ∏è  H·ªá th·ªëng ƒëang s·ª≠ d·ª•ng PostgreSQL
) else (
    echo ‚ö†Ô∏è  T√¨m th·∫•y MySQL containers:
    docker ps -a | findstr mysql
    
    echo.
    echo üîß Ki·ªÉm tra tr·∫°ng th√°i MySQL containers:
    for /f "tokens=1" %%i in ('docker ps -a --filter "name=mysql" --format "{{.Names}}"') do (
        echo Checking %%i...
        docker logs %%i --tail 5
    )
)

echo.
echo üß™ TEST K·∫æT N·ªêI DATABASE:
echo ================================================================

echo üìù Test PostgreSQL connections:
echo ----------------------------------------------------------------

REM Test main PostgreSQL
echo Testing main PostgreSQL connection...
docker exec postgres_low_ram psql -U postgres_user -d postgres -c "SELECT version();" 2>nul
if not errorlevel 1 (
    echo ‚úÖ PostgreSQL connection successful
) else (
    echo ‚ùå PostgreSQL connection failed
)

echo.
echo üìã Li·ªát k√™ databases hi·ªán c√≥:
docker exec postgres_low_ram psql -U postgres_user -d postgres -c "\l" | findstr "_db"

echo.
echo üåê TEST WEBSITE CONNECTIONS:
echo ================================================================

echo Testing Laravel PHP 8.4 (localhost:8010):
powershell -Command "try { $r = Invoke-WebRequest -Uri 'http://localhost:8010' -TimeoutSec 5 -UseBasicParsing; if ($r.StatusCode -eq 200) { Write-Host '‚úÖ Laravel 8.4: OK' -ForegroundColor Green } else { Write-Host '‚ö†Ô∏è Laravel 8.4: Issue' -ForegroundColor Yellow } } catch { Write-Host '‚ùå Laravel 8.4: Failed' -ForegroundColor Red }"

echo Testing Laravel PHP 7.4 (localhost:8020):
powershell -Command "try { $r = Invoke-WebRequest -Uri 'http://localhost:8020' -TimeoutSec 5 -UseBasicParsing; if ($r.StatusCode -eq 200) { Write-Host '‚úÖ Laravel 7.4: OK' -ForegroundColor Green } else { Write-Host '‚ö†Ô∏è Laravel 7.4: Issue' -ForegroundColor Yellow } } catch { Write-Host '‚ùå Laravel 7.4: Failed' -ForegroundColor Red }"

echo Testing WordPress PHP 7.4 (localhost:8030):
powershell -Command "try { $r = Invoke-WebRequest -Uri 'http://localhost:8030' -TimeoutSec 5 -UseBasicParsing; if ($r.StatusCode -eq 200) { Write-Host '‚úÖ WordPress: OK' -ForegroundColor Green } else { Write-Host '‚ö†Ô∏è WordPress: Issue' -ForegroundColor Yellow } } catch { Write-Host '‚ùå WordPress: Failed' -ForegroundColor Red }"

echo.
echo üîß KH·∫ÆC PH·ª§C T·ª∞ ƒê·ªòNG:
echo ================================================================

echo üîÑ Restart c√°c containers c√≥ v·∫•n ƒë·ªÅ:
echo ----------------------------------------------------------------

REM Check v√† restart WordPress n·∫øu c·∫ßn
powershell -Command "try { Invoke-WebRequest -Uri 'http://localhost:8030' -TimeoutSec 3 -UseBasicParsing | Out-Null } catch { Write-Host 'Restarting WordPress container...'; docker restart wordpress_php74_low_ram }"

REM Check v√† restart Laravel containers n·∫øu c·∫ßn
powershell -Command "try { Invoke-WebRequest -Uri 'http://localhost:8010' -TimeoutSec 3 -UseBasicParsing | Out-Null } catch { Write-Host 'Restarting Laravel 8.4 container...'; docker restart laravel_php84_low_ram }"

powershell -Command "try { Invoke-WebRequest -Uri 'http://localhost:8020' -TimeoutSec 3 -UseBasicParsing | Out-Null } catch { Write-Host 'Restarting Laravel 7.4 container...'; docker restart laravel_php74_low_ram }"

echo.
echo ‚è≥ ƒê·ª£i containers kh·ªüi ƒë·ªông l·∫°i...
timeout /t 15 /nobreak >nul

echo.
echo üß™ TEST L·∫†I SAU KHI KH·∫ÆC PH·ª§C:
echo ================================================================

echo Re-testing all services:
powershell -Command "try { $r = Invoke-WebRequest -Uri 'http://localhost:8010' -TimeoutSec 10 -UseBasicParsing; if ($r.StatusCode -eq 200) { Write-Host '‚úÖ Laravel 8.4: FIXED' -ForegroundColor Green } else { Write-Host '‚ö†Ô∏è Laravel 8.4: Still issues' -ForegroundColor Yellow } } catch { Write-Host '‚ùå Laravel 8.4: Still failed' -ForegroundColor Red }"

powershell -Command "try { $r = Invoke-WebRequest -Uri 'http://localhost:8020' -TimeoutSec 10 -UseBasicParsing; if ($r.StatusCode -eq 200) { Write-Host '‚úÖ Laravel 7.4: FIXED' -ForegroundColor Green } else { Write-Host '‚ö†Ô∏è Laravel 7.4: Still issues' -ForegroundColor Yellow } } catch { Write-Host '‚ùå Laravel 7.4: Still failed' -ForegroundColor Red }"

powershell -Command "try { $r = Invoke-WebRequest -Uri 'http://localhost:8030' -TimeoutSec 10 -UseBasicParsing; if ($r.StatusCode -eq 200) { Write-Host '‚úÖ WordPress: FIXED' -ForegroundColor Green } else { Write-Host '‚ö†Ô∏è WordPress: Still issues' -ForegroundColor Yellow } } catch { Write-Host '‚ùå WordPress: Still failed' -ForegroundColor Red }"

echo.
echo üìä T·ªîNG K·∫æT:
echo ================================================================

echo üóÑÔ∏è Database Status:
docker exec postgres_low_ram pg_isready -U postgres_user
if not errorlevel 1 (
    echo ‚úÖ PostgreSQL: Healthy
) else (
    echo ‚ùå PostgreSQL: Issues
)

echo.
echo üåê Website Status:
echo   ‚Ä¢ Laravel PHP 8.4: http://localhost:8010
echo   ‚Ä¢ Laravel PHP 7.4: http://localhost:8020  
echo   ‚Ä¢ WordPress PHP 7.4: http://localhost:8030
echo   ‚Ä¢ Mailhog: http://localhost:8025

echo.
echo üí° GI·∫¢I PH√ÅP CHO C√ÅC V·∫§N ƒê·ªÄ TH∆Ø·ªúNG G·∫∂P:
echo ================================================================

echo ‚ùå N·∫øu v·∫´n c√≥ l·ªói MySQL:
echo    ‚Ä¢ H·ªá th·ªëng n√†y S·ª¨ D·ª§NG POSTGRESQL, kh√¥ng ph·∫£i MySQL
echo    ‚Ä¢ T·∫•t c·∫£ platforms ƒë·ªÅu k·∫øt n·ªëi PostgreSQL
echo    ‚Ä¢ N·∫øu c·∫ßn MySQL, ph·∫£i t·∫°o container MySQL ri√™ng

echo.
echo ‚ùå N·∫øu website kh√¥ng truy c·∫≠p ƒë∆∞·ª£c:
echo    ‚Ä¢ Ch·∫°y: docker restart [container-name]
echo    ‚Ä¢ Ki·ªÉm tra logs: docker logs [container-name]
echo    ‚Ä¢ ƒê·ª£i 1-2 ph√∫t ƒë·ªÉ container kh·ªüi ƒë·ªông ho√†n to√†n

echo.
echo ‚ùå N·∫øu database connection failed:
echo    ‚Ä¢ Ch·∫°y: scripts\fix-platform-databases.bat
echo    ‚Ä¢ Ki·ªÉm tra t√™n database c√≥ ƒë√∫ng kh√¥ng
echo    ‚Ä¢ Restart PostgreSQL: docker restart postgres_low_ram

echo.
echo üîß L·ªÜNH KH·∫ÆC PH·ª§C NHANH:
echo ================================================================

echo scripts\fix-platform-databases.bat    # S·ª≠a database issues
echo scripts\one-click-optimize.bat        # T·ªëi ∆∞u to√†n b·ªô h·ªá th·ªëng
echo docker-compose -f docker-compose.low-ram.yml restart  # Restart t·∫•t c·∫£

echo.
echo üåü MYSQL/DATABASE ISSUES CHECK COMPLETED!

pause
