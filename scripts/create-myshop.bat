@echo off
REM Create my-shop Laravel 7.4 platform

echo.
echo =========================================
echo    Creating my-shop Laravel Platform
echo =========================================
echo.

echo üèóÔ∏è  Creating my-shop Laravel 7.4 platform...

REM Create project directory
mkdir "projects\my-shop" 2>nul
echo ‚úÖ Project directory created: projects\my-shop

REM Create Laravel index.php
(
echo ^<?php
echo /**
echo  * my-shop - Laravel PHP 7.4 + PostgreSQL + Redis
echo  * Auto-generated by Docker Master Platform
echo  */
echo.
echo echo "^<h1^>üõí my-shop - Laravel PHP 7.4^</h1^>";
echo echo "^<div style='font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px;'^>";
echo.
echo echo "^<h2^>üìã Platform Information^</h2^>";
echo echo "^<p^>^<strong^>Platform:^</strong^> my-shop^</p^>";
echo echo "^<p^>^<strong^>Type:^</strong^> Laravel PHP 7.4^</p^>";
echo echo "^<p^>^<strong^>PHP Version:^</strong^> " . phpversion^(^) . "^</p^>";
echo echo "^<p^>^<strong^>Port:^</strong^> 8015^</p^>";
echo echo "^<p^>^<strong^>Server:^</strong^> " . $_SERVER['SERVER_SOFTWARE'] . "^</p^>";
echo.
echo // Database test
echo echo "^<h2^>üóÑÔ∏è PostgreSQL Connection^</h2^>";
echo $host = $_ENV['DB_HOST'] ?? 'postgres_low_ram';
echo $dbname = $_ENV['DB_DATABASE'] ?? 'my_shop_db';
echo $username = $_ENV['DB_USERNAME'] ?? 'postgres_user';
echo $password = $_ENV['DB_PASSWORD'] ?? 'postgres_pass';
echo.
echo try {
echo     $pdo = new PDO^("pgsql:host=$host;port=5432;dbname=$dbname", $username, $password^);
echo     $pdo-^>setAttribute^(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION^);
echo     echo "^<p^>‚úÖ PostgreSQL connection successful!^</p^>";
echo     echo "^<p^>^<strong^>Database:^</strong^> $dbname^</p^>";
echo.
echo     // Create sample products table
echo     $pdo-^>exec^("CREATE TABLE IF NOT EXISTS products ^(
echo         id SERIAL PRIMARY KEY,
echo         name VARCHAR^(100^) NOT NULL,
echo         description TEXT,
echo         price DECIMAL^(10,2^),
echo         category VARCHAR^(50^),
echo         stock INTEGER DEFAULT 0,
echo         created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
echo     ^)");
echo.
echo     // Insert sample products
echo     $stmt = $pdo-^>prepare^("INSERT INTO products ^(name, description, price, category, stock^) VALUES ^(?, ?, ?, ?, ?^) ON CONFLICT DO NOTHING");
echo     $stmt-^>execute^(['Laptop Pro', 'High-performance laptop for professionals', 1299.99, 'Electronics', 10]^);
echo     $stmt-^>execute^(['Wireless Headphones', 'Premium noise-canceling headphones', 199.99, 'Electronics', 25]^);
echo     $stmt-^>execute^(['Coffee Mug', 'Ceramic coffee mug with logo', 12.99, 'Accessories', 50]^);
echo     $stmt-^>execute^(['T-Shirt', 'Comfortable cotton t-shirt', 24.99, 'Clothing', 30]^);
echo.
echo     // Display products
echo     echo "^<h3^>üõçÔ∏è Sample Product Catalog:^</h3^>";
echo     $stmt = $pdo-^>query^("SELECT * FROM products ORDER BY id");
echo     $products = $stmt-^>fetchAll^(PDO::FETCH_ASSOC^);
echo.
echo     if ^($products^) {
echo         echo "^<table border='1' style='border-collapse: collapse; width: 100%%;'^>";
echo         echo "^<tr^>^<th^>ID^</th^>^<th^>Name^</th^>^<th^>Description^</th^>^<th^>Price^</th^>^<th^>Category^</th^>^<th^>Stock^</th^>^</tr^>";
echo         foreach ^($products as $product^) {
echo             echo "^<tr^>";
echo             echo "^<td^>" . htmlspecialchars^($product['id']^) . "^</td^>";
echo             echo "^<td^>" . htmlspecialchars^($product['name']^) . "^</td^>";
echo             echo "^<td^>" . htmlspecialchars^($product['description']^) . "^</td^>";
echo             echo "^<td^>$" . htmlspecialchars^($product['price']^) . "^</td^>";
echo             echo "^<td^>" . htmlspecialchars^($product['category']^) . "^</td^>";
echo             echo "^<td^>" . htmlspecialchars^($product['stock']^) . "^</td^>";
echo             echo "^</tr^>";
echo         }
echo         echo "^</table^>";
echo     }
echo.
echo } catch ^(Exception $e^) {
echo     echo "^<p^>‚ùå Database failed: " . $e-^>getMessage^(^) . "^</p^>";
echo }
echo.
echo // Redis test
echo echo "^<h2^>üî¥ Redis Connection^</h2^>";
echo $redis_host = $_ENV['REDIS_HOST'] ?? 'redis_low_ram';
echo try {
echo     $redis = new Redis^(^);
echo     $redis-^>connect^($redis_host, 6379^);
echo     $redis-^>set^('my_shop_test', 'Redis working for my-shop!'^);
echo     $value = $redis-^>get^('my_shop_test'^);
echo     echo "^<p^>‚úÖ Redis connection successful!^</p^>";
echo     echo "^<p^>^<strong^>Test value:^</strong^> " . htmlspecialchars^($value^) . "^</p^>";
echo } catch ^(Exception $e^) {
echo     echo "^<p^>‚ùå Redis failed: " . $e-^>getMessage^(^) . "^</p^>";
echo }
echo.
echo echo "^<h2^>üöÄ E-commerce Features^</h2^>";
echo echo "^<ul^>";
echo echo "^<li^>Product catalog with categories^</li^>";
echo echo "^<li^>Shopping cart functionality^</li^>";
echo echo "^<li^>User authentication^</li^>";
echo echo "^<li^>Order management^</li^>";
echo echo "^<li^>Payment integration^</li^>";
echo echo "^<li^>Inventory tracking^</li^>";
echo echo "^</ul^>";
echo.
echo echo "^<p^>^<em^>üê≥ my-shop platform ready for Laravel e-commerce development!^</em^>^</p^>";
echo echo "^</div^>";
echo ?^>
) > "projects\my-shop\index.php"

echo ‚úÖ my-shop project created in projects\my-shop\

echo.
echo üóÑÔ∏è Creating database...
docker exec postgres_low_ram psql -U postgres_user -d postgres -c "CREATE DATABASE my_shop_db;" 2>nul
if errorlevel 1 (
    echo ‚ö†Ô∏è  Database may already exist
) else (
    echo ‚úÖ Database my_shop_db created
)

echo.
echo üéâ my-shop Platform Created!
echo ================================================================
echo.
echo üìã What was created:
echo    ‚Ä¢ Project directory: projects\my-shop\
echo    ‚Ä¢ Laravel index.php with e-commerce demo
echo    ‚Ä¢ Database: my_shop_db (in PostgreSQL)
echo    ‚Ä¢ Sample products table with inventory
echo.

echo üìù Add this to docker-compose.low-ram.yml services section:
echo.
echo   # my-shop - Laravel PHP 7.4 E-commerce Platform
echo   my-shop:
echo     build:
echo       context: ./docker/php74
echo       dockerfile: Dockerfile
echo     container_name: my_shop_php74
echo     restart: unless-stopped
echo     ports:
echo       - "8015:80"
echo       - "9075:9003"  # Xdebug port
echo     volumes:
echo       - ./projects/my-shop:/var/www/html
echo       - ./logs/apache/my-shop:/var/log/apache2
echo       - ./data/uploads/my-shop:/app/uploads
echo     environment:
echo       - WEB_DOCUMENT_ROOT=/var/www/html
echo       - PHP_VERSION=7.4
echo       - PHP_MEMORY_LIMIT=96M
echo       - PHP_OPCACHE_MEMORY_CONSUMPTION=32
echo       - DB_HOST=postgres_low_ram
echo       - DB_PORT=5432
echo       - DB_DATABASE=my_shop_db
echo       - DB_USERNAME=postgres_user
echo       - DB_PASSWORD=postgres_pass
echo       - REDIS_HOST=redis_low_ram
echo       - REDIS_PORT=6379
echo     deploy:
echo       resources:
echo         limits:
echo           memory: 128M
echo         reservations:
echo           memory: 96M
echo     networks:
echo       - low-ram-network
echo     depends_on:
echo       - postgres
echo       - redis
echo     healthcheck:
echo       test: ["CMD", "curl", "-f", "http://localhost/"]
echo       interval: 30s
echo       timeout: 10s
echo       retries: 3

echo.
echo üí° Quick start:
echo   1. Add the service configuration above
echo   2. Run: docker-compose -f docker-compose.low-ram.yml up -d my-shop
echo   3. Visit: http://localhost:8015

pause
