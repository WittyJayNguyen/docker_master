@echo off
REM Docker Master Platform - Auto-Discovery Platform Creator
REM T·ª± ƒë·ªông t·∫°o platform m·ªõi v·ªõi c·∫•u h√¨nh t·ªëi ∆∞u

setlocal enabledelayedexpansion

if "%~3"=="" (
    echo.
    echo =========================================
    echo    Docker Master - Auto-Discovery
    echo =========================================
    echo.
    echo Usage: create-platform.bat [type] [name] [port]
    echo.
    echo Platform Types:
    echo   wordpress    - WordPress PHP 7.4 + PostgreSQL
    echo   laravel74    - Laravel PHP 7.4 + PostgreSQL + Redis
    echo   laravel84    - Laravel PHP 8.4 + PostgreSQL + Redis
    echo   ecommerce    - E-commerce Laravel + Full Stack
    echo.
    echo Examples:
    echo   create-platform.bat wordpress my-blog 8015
    echo   create-platform.bat laravel74 my-shop 8016
    echo   create-platform.bat laravel84 api-server 8017
    echo   create-platform.bat ecommerce food-store 8018
    echo.
    pause
    exit /b 1
)

set PLATFORM_TYPE=%1
set PLATFORM_NAME=%2
set PLATFORM_PORT=%3

echo.
echo =========================================
echo    Auto-Discovery: Creating %PLATFORM_NAME%
echo =========================================
echo.

echo ‚ÑπÔ∏è  Platform Type: %PLATFORM_TYPE%
echo ‚ÑπÔ∏è  Platform Name: %PLATFORM_NAME%
echo ‚ÑπÔ∏è  Platform Port: %PLATFORM_PORT%
echo.

REM Validate platform type
if /i "%PLATFORM_TYPE%"=="wordpress" goto :valid_type
if /i "%PLATFORM_TYPE%"=="laravel74" goto :valid_type
if /i "%PLATFORM_TYPE%"=="laravel84" goto :valid_type
if /i "%PLATFORM_TYPE%"=="ecommerce" goto :valid_type

echo ‚ùå Invalid platform type: %PLATFORM_TYPE%
echo ‚ÑπÔ∏è  Valid types: wordpress, laravel74, laravel84, ecommerce
pause
exit /b 1

:valid_type
echo ‚úÖ Valid platform type: %PLATFORM_TYPE%

REM Check if port is already in use
findstr /C:"%PLATFORM_PORT%:80" docker-compose.low-ram.yml >nul 2>&1
if not errorlevel 1 (
    echo ‚ùå Port %PLATFORM_PORT% is already in use!
    echo ‚ÑπÔ∏è  Please choose a different port
    pause
    exit /b 1
)

REM Create project directories
echo ‚ÑπÔ∏è  Creating project directory...
mkdir "projects\%PLATFORM_NAME%" 2>nul
mkdir "logs\apache\%PLATFORM_NAME%" 2>nul
mkdir "data\uploads\%PLATFORM_NAME%" 2>nul
echo ‚úÖ Project directory created: projects\%PLATFORM_NAME%

REM Determine PHP version and Xdebug port
if /i "%PLATFORM_TYPE%"=="wordpress" (
    set PHP_VERSION=74
    set /a XDEBUG_PORT=%PLATFORM_PORT%+1000
)
if /i "%PLATFORM_TYPE%"=="laravel74" (
    set PHP_VERSION=74
    set /a XDEBUG_PORT=%PLATFORM_PORT%+1000
)
if /i "%PLATFORM_TYPE%"=="laravel84" (
    set PHP_VERSION=84
    set /a XDEBUG_PORT=%PLATFORM_PORT%+1000
)
if /i "%PLATFORM_TYPE%"=="ecommerce" (
    set PHP_VERSION=84
    set /a XDEBUG_PORT=%PLATFORM_PORT%+1000
)

REM Create platform-specific files
echo ‚ÑπÔ∏è  Creating platform files...

if /i "%PLATFORM_TYPE%"=="wordpress" goto :create_wordpress
if /i "%PLATFORM_TYPE%"=="laravel74" goto :create_laravel74
if /i "%PLATFORM_TYPE%"=="laravel84" goto :create_laravel84
if /i "%PLATFORM_TYPE%"=="ecommerce" goto :create_ecommerce

:create_wordpress
(
echo ^<?php
echo /**
echo  * %PLATFORM_NAME% - WordPress PHP 7.4 + PostgreSQL
echo  * Auto-generated by Docker Master Platform
echo  */
echo.
echo echo "^<h1^>üìù %PLATFORM_NAME% - WordPress Platform^</h1^>";
echo echo "^<div style='font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px;'^>";
echo.
echo echo "^<h2^>üìã Platform Information^</h2^>";
echo echo "^<p^>^<strong^>Platform:^</strong^> %PLATFORM_NAME%^</p^>";
echo echo "^<p^>^<strong^>Type:^</strong^> WordPress^</p^>";
echo echo "^<p^>^<strong^>PHP Version:^</strong^> " . phpversion^(^) . "^</p^>";
echo echo "^<p^>^<strong^>Port:^</strong^> %PLATFORM_PORT%^</p^>";
echo.
echo echo "^<h2^>üóÑÔ∏è Database Connection Test^</h2^>";
echo $host = $_ENV['DB_HOST'] ?? 'postgres_low_ram';
echo $dbname = $_ENV['DB_DATABASE'] ?? '%PLATFORM_NAME%_db';
echo $username = $_ENV['DB_USERNAME'] ?? 'postgres_user';
echo $password = $_ENV['DB_PASSWORD'] ?? 'postgres_pass';
echo.
echo try {
echo     $pdo = new PDO^("pgsql:host=$host;port=5432;dbname=$dbname", $username, $password^);
echo     $pdo-^>setAttribute^(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION^);
echo     echo "^<p^>‚úÖ PostgreSQL connection successful!^</p^>";
echo     echo "^<p^>^<strong^>Database:^</strong^> $dbname^</p^>";
echo } catch ^(Exception $e^) {
echo     echo "^<p^>‚ùå Database connection failed: " . $e-^>getMessage^(^) . "^</p^>";
echo }
echo.
echo echo "^<h2^>üöÄ Next Steps^</h2^>";
echo echo "^<ul^>";
echo echo "^<li^>Install WordPress in this directory^</li^>";
echo echo "^<li^>Configure wp-config.php for PostgreSQL^</li^>";
echo echo "^<li^>Set up your WordPress theme^</li^>";
echo echo "^</ul^>";
echo.
echo echo "^<p^>^<em^>üê≥ %PLATFORM_NAME% platform ready for WordPress!^</em^>^</p^>";
echo echo "^</div^>";
echo ?^>
) > "projects\%PLATFORM_NAME%\index.php"
goto :create_database

:create_laravel74
(
echo ^<?php
echo /**
echo  * %PLATFORM_NAME% - Laravel PHP 7.4 + PostgreSQL + Redis
echo  * Auto-generated by Docker Master Platform
echo  */
echo.
echo echo "^<h1^>üöÄ %PLATFORM_NAME% - Laravel PHP 7.4^</h1^>";
echo echo "^<div style='font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px;'^>";
echo.
echo echo "^<h2^>üìã Platform Information^</h2^>";
echo echo "^<p^>^<strong^>Platform:^</strong^> %PLATFORM_NAME%^</p^>";
echo echo "^<p^>^<strong^>Type:^</strong^> Laravel PHP 7.4^</p^>";
echo echo "^<p^>^<strong^>PHP Version:^</strong^> " . phpversion^(^) . "^</p^>";
echo echo "^<p^>^<strong^>Port:^</strong^> %PLATFORM_PORT%^</p^>";
echo.
echo // Database test
echo echo "^<h2^>üóÑÔ∏è PostgreSQL Connection^</h2^>";
echo $host = $_ENV['DB_HOST'] ?? 'postgres_low_ram';
echo $dbname = $_ENV['DB_DATABASE'] ?? '%PLATFORM_NAME%_db';
echo $username = $_ENV['DB_USERNAME'] ?? 'postgres_user';
echo $password = $_ENV['DB_PASSWORD'] ?? 'postgres_pass';
echo.
echo try {
echo     $pdo = new PDO^("pgsql:host=$host;port=5432;dbname=$dbname", $username, $password^);
echo     echo "^<p^>‚úÖ PostgreSQL connection successful!^</p^>";
echo } catch ^(Exception $e^) {
echo     echo "^<p^>‚ùå Database failed: " . $e-^>getMessage^(^) . "^</p^>";
echo }
echo.
echo // Redis test
echo echo "^<h2^>üî¥ Redis Connection^</h2^>";
echo $redis_host = $_ENV['REDIS_HOST'] ?? 'redis_low_ram';
echo try {
echo     $redis = new Redis^(^);
echo     $redis-^>connect^($redis_host, 6379^);
echo     echo "^<p^>‚úÖ Redis connection successful!^</p^>";
echo } catch ^(Exception $e^) {
echo     echo "^<p^>‚ùå Redis failed: " . $e-^>getMessage^(^) . "^</p^>";
echo }
echo.
echo echo "^<p^>^<em^>üê≥ %PLATFORM_NAME% ready for Laravel development!^</em^>^</p^>";
echo echo "^</div^>";
echo ?^>
) > "projects\%PLATFORM_NAME%\index.php"
goto :create_database

:create_laravel84
(
echo ^<?php
echo /**
echo  * %PLATFORM_NAME% - Laravel PHP 8.4 + PostgreSQL + Redis
echo  * Auto-generated by Docker Master Platform
echo  */
echo.
echo echo "^<h1^>üöÄ %PLATFORM_NAME% - Laravel PHP 8.4^</h1^>";
echo echo "^<div style='font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px;'^>";
echo.
echo echo "^<h2^>üìã Platform Information^</h2^>";
echo echo "^<p^>^<strong^>Platform:^</strong^> %PLATFORM_NAME%^</p^>";
echo echo "^<p^>^<strong^>Type:^</strong^> Laravel PHP 8.4^</p^>";
echo echo "^<p^>^<strong^>PHP Version:^</strong^> " . phpversion^(^) . "^</p^>";
echo echo "^<p^>^<strong^>Port:^</strong^> %PLATFORM_PORT%^</p^>";
echo.
echo // Database and Redis tests ^(similar structure^)
echo echo "^<p^>^<em^>üê≥ %PLATFORM_NAME% ready for modern Laravel development!^</em^>^</p^>";
echo echo "^</div^>";
echo ?^>
) > "projects\%PLATFORM_NAME%\index.php"
goto :create_database

:create_ecommerce
call :create_laravel84
mkdir "projects\%PLATFORM_NAME%\app\Models" 2>nul
mkdir "projects\%PLATFORM_NAME%\database\migrations" 2>nul
echo ‚úÖ E-commerce structure created with models and migrations
goto :create_database

:create_database
echo ‚ÑπÔ∏è  Creating database...
set DB_NAME=%PLATFORM_NAME%_db

docker exec postgres_low_ram psql -U postgres_user -d postgres -c "CREATE DATABASE %DB_NAME%;" >nul 2>&1
if errorlevel 1 (
    echo ‚ö†Ô∏è  Database %DB_NAME% may already exist
) else (
    echo ‚úÖ Database %DB_NAME% created successfully
)

echo ‚ÑπÔ∏è  Adding service to docker-compose configuration...

REM Backup current compose file
copy docker-compose.low-ram.yml docker-compose.low-ram.yml.backup >nul 2>&1

REM Add service configuration (manual step for now)
echo.
echo üìù Please add the following service to docker-compose.low-ram.yml:
echo.
echo   # %PLATFORM_NAME% - Auto-generated %PLATFORM_TYPE% platform
echo   %PLATFORM_NAME%:
echo     build:
echo       context: ./docker/php%PHP_VERSION%
echo       dockerfile: Dockerfile
echo     container_name: %PLATFORM_NAME%_php%PHP_VERSION%
echo     restart: unless-stopped
echo     ports:
echo       - "%PLATFORM_PORT%:80"
echo       - "%XDEBUG_PORT%:9003"  # Xdebug port
echo     volumes:
echo       - ./projects/%PLATFORM_NAME%:/var/www/html
echo       - ./logs/apache/%PLATFORM_NAME%:/var/log/apache2
echo       - ./data/uploads/%PLATFORM_NAME%:/app/uploads
echo     environment:
echo       - WEB_DOCUMENT_ROOT=/var/www/html
echo       - PHP_VERSION=%PHP_VERSION%
echo       - PHP_MEMORY_LIMIT=96M
echo       - PHP_OPCACHE_MEMORY_CONSUMPTION=32
echo       - DB_HOST=postgres_low_ram
echo       - DB_PORT=5432
echo       - DB_DATABASE=%PLATFORM_NAME%_db
echo       - DB_USERNAME=postgres_user
echo       - DB_PASSWORD=postgres_pass
echo       - REDIS_HOST=redis_low_ram
echo       - REDIS_PORT=6379
echo     deploy:
echo       resources:
echo         limits:
echo           memory: 128M
echo         reservations:
echo           memory: 96M
echo     networks:
echo       - low-ram-network
echo     depends_on:
echo       - postgres
echo       - redis
echo     healthcheck:
echo       test: ["CMD", "curl", "-f", "http://localhost/"]
echo       interval: 30s
echo       timeout: 10s
echo       retries: 3
echo.

echo üéâ Platform Creation Completed!
echo ================================================================
echo.
echo ‚úÖ Platform Details:
echo   ‚Ä¢ Name: %PLATFORM_NAME%
echo   ‚Ä¢ Type: %PLATFORM_TYPE%
echo   ‚Ä¢ URL: http://localhost:%PLATFORM_PORT%
echo   ‚Ä¢ Database: %PLATFORM_NAME%_db
echo   ‚Ä¢ Xdebug: localhost:%XDEBUG_PORT%
echo.
echo ‚ÑπÔ∏è  Next Steps:
echo   1. Add the service configuration to docker-compose.low-ram.yml
echo   2. Run: docker-compose -f docker-compose.low-ram.yml up -d %PLATFORM_NAME%
echo   3. Visit: http://localhost:%PLATFORM_PORT%
echo.
echo üí° Quick Commands:
echo   ‚Ä¢ Build: docker-compose -f docker-compose.low-ram.yml build %PLATFORM_NAME%
echo   ‚Ä¢ Start: docker-compose -f docker-compose.low-ram.yml up -d %PLATFORM_NAME%
echo   ‚Ä¢ Logs: docker logs %PLATFORM_NAME%_php%PHP_VERSION%
echo   ‚Ä¢ Shell: docker exec -it %PLATFORM_NAME%_php%PHP_VERSION% bash
echo   ‚Ä¢ Stop: docker-compose -f docker-compose.low-ram.yml stop %PLATFORM_NAME%
echo.

pause
